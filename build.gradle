plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.id.app'
version = '0.0.1-SNAPSHOT'
description = 'CRUD project for Spring Boot'

java {
	toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.postgresql:postgresql:42.6.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'  // optional
	testImplementation 'com.jayway.jsonpath:json-path:2.9.0'       // optional
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'   // optional
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = '0.8.12'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
	// optional excludes from coverage
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/*Application.class',
				'**/config/**',
				'**/dto/**',
				'**/generated/**'
		])
	}))
}

/** âœ… Configure existing task (do NOT register a new one) */
jacocoTestCoverageVerification {
	dependsOn test
	violationRules {
		rule {
			limit {
				counter = 'INSTRUCTION'
				value = 'COVERED_RATIO'
				minimum = 0.80
			}
		}
		rule {
			element = 'CLASS'
			excludes = ['*.*Application', '*/config/*', '*/dto/*']
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
